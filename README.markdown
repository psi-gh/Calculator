
## Тестовое задание

Написать калькулятор, который принимает входную строку, содержащую математическое выражение (целые и десятично-дробные числа, знаки +, -, *, / и скобки) и выводит в консоль результат его вычисления.

Главным критерием при оценке задания является использование при разработке TDD и принципов SOLID. Архитектура решения должна обеспечивать расширение списка поддерживаемых операций при минимальном и максимально безболезненном для существующей функциональности внесении изменений в исходный код. Код должен быть легко читаем и отформатирован в едином стиле, содержать минимальное число поясняющих комментариев.

Пример консольного ввода:
Введите выражение: 1+2-3
Результат: 0

## Описание решения

Для упрощения, было решено, что исходная строка не содержит разделителей (пробел и т.п.). Вычисление строки с выражением происходит в несколько этапов.

###### 1. Токенизация

Разбор строки и получение на выходе массива токенов. Токены представляют собой все члены выражения: операторы, операнды, группы. Групповой токен (PCGroupToken) является аналогом скобочного выражения, хранит в себе массив сгруппированных токенов. 


###### 2. Группировка

Является аналогом расставлении скобок в выражении с учетом приоритета операций. Все операторы и их операнды, в соответствии с приоритетом, заменяются на PCGroupToken. Внутри всех PCGroupToken, которые создались а первом этапе, происходит то же самое.

###### 3. Построение дерева выражения

Из сгруппированных токенов строится дерево выражения - это структура на основе класса-узла PCEvaluationTreeNode, которая разбирается все группы токенов и иерархически выстраивает операторы в них.

          +    
         / \  
        1   *
       / \  
      2   3

###### 4. Вычисление

Корневой узел запрашивает у потомков их значения и производит над ними необходимые операции.

## Замечания

Парсинг каждого типа элемента инкапсулирован в отдельных классах-экстракторах (наследники PCExctractor). При необходимости этот набор может быть расширен для парсинга любых новых типов токенов, например, экспоненциальные числа или функции.
Описание для каждой операции находится в наследниках PCOperationToken, так же там содержится метод для самой операции.
Приоритеты операций настраиваются в классе PCOperationSet.

Для добавления новой операции надо унаследовать класс PCOperationToken и реализовать необходимые методы, а так же добавить её к существующим операциями в инициализации PSOperationSet.

В данном решении нет поддержки унарных операторов. Чтобы её ввести, надо сделать правки алгоритма парсинга операторов (класс PCOperatorExctrator) и алгоритма группировки токенов (класс PCGrouper)
